#include <stdio.h>
#include <stdlib.h>
#define max 5
void floyd(int);
int mini(int, int);
int w[max][max], d[max][max][max];
void main()
{
    int i, j, k, v;
    printf("Enter the number of vertices \n");
    scanf("%d", &v);
    printf("Enter the weight\n");
    for (i = 1; i <= v; i++)
    {
        for (j = 1; j <= v; j++)
        {
            printf("weight for %d to %d \n",i,j);
            scanf("%d", &w[i][j]);
        }
    }
    floyd(v);
}
int mini(int a, int b)
{
    if (a < b)
        return a;

    return b;
    
}
void floyd(int v)
{
    int i, j, k;
    for (i = 1; i <= v; i++)
    {
        for (j = 1; j <= v; j++)
        {
            d[k][i][j] = w[i][j];
        }
    }
    for (k = 1; k <= v; k++)
    {
        for (i = 1; i <= v; i++)
        {
            for (j = 1; j <= v; j++)
            {
                d[k][i][j] = mini(d[k - 1][i][j], d[k - 1][i][k] + d[k - 1][k][j]);
            }
        }
    }
    //to print the marix of 
    for (k = 0; k <= v; k++)
    {
        printf("k=%d \n", k);
        for (i = 1; i <= v; i++)
        {
            printf("\n");
            for (j = 1; j <= v; j++)
                printf("\t %d", d[k][i][j]);
        }
        printf("\n");
    }
}
/*
PS E:\III Sem\Dynamic programming> gcc .\Qu_02_floyd.c
PS E:\III Sem\Dynamic programming> ./a.exe
Enter the number of vertices 
4
Enter the weight
weight for 1 to 1 
0
weight for 1 to 2 
99
weight for 1 to 3 
7
weight for 1 to 4 
99
weight for 2 to 1 
2
weight for 2 to 2 
0
weight for 2 to 3 
99
weight for 2 to 4 
99
weight for 3 to 1 
99
weight for 3 to 2 
6
weight for 3 to 3 
0
weight for 3 to 4 
5
weight for 4 to 1 
3
weight for 4 to 2 
99
weight for 4 to 3 
99
weight for 4 to 4 
0
k=0 

         0       99      7       99
         2       0       99      99
         99      6       0       5
         3       99      99      0
k=1

         0       99      7       99
         2       0       9       99
         99      6       0       5
         3       99      10      0
k=2

         0       99      7       99
         2       0       9       99
         8       6       0       5
         3       99      10      0
k=3

         0       13      7       12
         2       0       9       14
         8       6       0       5
         3       16      10      0
k=4

         0       13      7       12
         2       0       9       14
         8       6       0       5
         3       16      10      0
PS E:\III Sem\Dynamic programming>

*/
